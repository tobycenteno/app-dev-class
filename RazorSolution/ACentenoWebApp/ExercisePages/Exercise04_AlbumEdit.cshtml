@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "Exercise04";


    var alid = Request.QueryString["alid"];
    if (alid.IsEmpty())
    {
        Response.Redirect("Exercise04_AlbumSearch.cshtml");
    }

    var albumid = Request.Form["ProductID"];
    var albumtitle = Request.Form["ProductName"];
    var artistid = Request.Form["SupplierList"];
    var releaseyear = Request.Form["CategoryList"];
    var releaselabel = Request.Form["QuantityPerUnit"];

    //capture which button was pressed
    var thebutton = Request.Form["theButton"];


    albumid = alid;

    var db = Database.Open("CHINOOKDB");

     var artistquery = "SELECT ArtistId, Name  "
                        + "FROM Artists "
                        + "ORDER BY Name";

    var artistlist = db.Query(artistquery);

    var queryStatement = "SELECT AlbumId, Title, ArtistId, ReleaseYear, ReleaseLabel  "
                        + "FROM Albums "
                        + "WHERE AlbumId = @0";
    var queryAlbums = db.QuerySingle(queryStatement, alid);
}


@section pagetitle{
    <span style="font-size:xx-large"><strong>Exercise04: Update/Delete Album</strong></span>
}

@if (IsPost)
{
    if (thebutton.Equals("cancel"))
    {
        //a)could redirect to search page
        //b)reset data to the current record for productid
        //c)empty the data fields.
        //for b and c you should also supply a message to the user
        albumid = "";
        albumtitle = "";
        artistid = "0";
        releaseyear = "0";
        releaselabel = "";
        <p>
            <span style="color:blue">
                User has cancel the action. Return to search for another product
            </span>
            <a href="~/DBPages/ProductSearch.cshtml">go to search...</a>
        </p>
    }
    else if (thebutton.Equals("delete"))
    {
        //check is there a productid to delete
        //if not message to use to get new product
        //if present
        //  create delete command
        //  execute
        //  message
        //  wrap in try/catch
        if (string.IsNullOrEmpty(albumid))
        {
            <p>
                <span style="color:blue">
                    No product selected. Return to search for another product
                </span>
                <a href="~/DBPages/ProductSearch.cshtml">go to search...</a>
            </p>
        }
        else
        {
            try
            {
                var deletecommmand = "DELETE Albums WHERE AlbumId = @0";
                int results = db.Execute(deletecommmand, albumid);
                if (results > 0)
                {
                    <p>
                        <span style="color:green">
                            Album deleted.
                        </span>
                    </p>
                    //optionally clear the fields.
                    //productid = "";
                    //productname = "";
                    //supplierid = "0";
                    //categoryid = "0";
                    //quantityperunit = "";
                    //unitprice = "";
                    //unitsinstock = "";
                    //unitsonorder = "";
                    //reorderlevel = "";
                    //discontinued = "0";
                }
                else
                {
                    <p>
                        <span style="color:blue">
                            Delete failed. No product called @productname with an id of @productid on file.
                        </span>
                    </p>
                }

            }
            catch (Exception ex)
            {
                <p>
                    <span style="color:blue">
                        Deleted failed. Error @ex.Message
                    </span>

                </p>
            }
        }
    }
    else
    {
        //check is there a productid to update
        //if not message to use to get new product
        //if present
        //  cause validations
        //  if valid
        //      create delete command
        //      execute
        //      message
        //      wrap in try/catch
        if (string.IsNullOrEmpty(albumid))
        {
            <p>
                <span style="color:blue">
                    No product selected. Return to search for another product
                </span>
                <a href="~/DBPages/ProductSearch.cshtml">go to search...</a>
            </p>
        }
        else
        {
            if (Validation.IsValid())
            {
                try
                {
                    var updatecommmand = "UPDATE Albums  "
                                        + "SET Title = @0, "
                                        + "ArtistId = @1, "
                                        + "ReleaseYear = @2, "
                                        + "ReleaseLabel = @3 "
                                        + "WHERE AlbumId = @4";
                    //the placeholders expect a value not to be confused
                    // with a character string
                    //the null (as a value) is NOT equal to "null" which is a string
                    int results = db.Execute(updatecommmand, albumtitle,
                        artistid == "" ? null : artistid,
                        string.IsNullOrEmpty(releaseyear) ? null : releaseyear,
                        string.IsNullOrEmpty(releaselabel) ? null : releaselabel);
                    if (results > 0)
                    {
                        <p>
                            <span style="color:green">
                                Product updated.
                            </span>
                        </p>
                    }
                    else
                    {
                        <p>
                            <span style="color:blue">
                                Update failed. No product called @productname with an id of @productid on file.
                            </span>
                        </p>
                    }
                }
                catch (Exception ex)
                {
                    <p>
                        <span style="color:blue">
                            Deleted failed. Error @ex.Message
                        </span>

                    </p>
                }
            }
        }
    }
}
else //for IsPost
{
    //if this page is being shown for the "first time"
    //the page accesses the database for the current record
    //to display to the user
    queryAlbums = db.QuerySingle(queryStatement, alid);

    //moving the current record data to the form controls
    //NEVER code to the data supplied
    //the Products table on the Northwind database does not
    //  have a record where the nullable fields are actual null
    //the following code takes into account fields which actually
    //  maybe null
    albumid = queryAlbums.AlbumID.ToString();
    albumtitle = queryAlbums.Title;
    supplierid = queryAlbums.SupplierID == null ? "0" : queryProducts.SupplierID.ToString();
    categoryid = queryAlbums.CategoryID == null ? "0" : queryProducts.CategoryID.ToString();
    quantityperunit = queryAlbums.QuantityPerUnit;
    unitprice = queryProducts.UnitPrice == null ? "" : queryProducts.UnitPrice.ToString();
    unitsinstock = queryProducts.UnitsInStock == null ? "" : queryProducts.UnitsInStock.ToString();
    unitsonorder = queryProducts.UnitsOnOrder == null ? "" : queryProducts.UnitsOnOrder.ToString();
    reorderlevel = queryProducts.ReorderLevel == null ? "" : queryProducts.ReorderLevel.ToString();
    discontinued = queryProducts.Discontinued.ToString();//from sql 0/1
}
<div class="form-group">

    <form id="theForm" action="" method="post">
        <div class="col-sm-6">
            <label id="forProductID">Product ID</label><br />
            <label id="forProductID">Product Name</label><br />
            <label id="forProductID">Supplier</label><br />
            <label id="forProductID">Category</label><br />
            <label id="forProductID">Quantity Per Unit</label><br />
            <label id="forProductID">Unit Price</label><br />
            <label id="forProductID">Units In Stock</label><br />
            <label id="forProductID">Units On Order</label><br />
            <label id="forProductID">ReorderLevel</label><br />
            <label id="forProductID">Discontinued</label><br />
        </div>
        <div class="col-sm-6">
            <input type="text" name="ProductID" value="@albumid" readonly /><br />
            <input type="text" name="ProductName" value="@albumtitle" /><br />
            <select name="SupplierList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in querySuppliers)
                {
                    if (acollectionrow.SupplierID.ToString() == supplierid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <select name="CategoryList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in queryCategories)
                {
                    if (acollectionrow.CategoryID.ToString() == categoryid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <input type="text" name="QuantityPerUnit" value="@quantityperunit" /><br />
            <input type="number" name="UnitPrice" value="@unitprice" min="0.00" step="0.01" /><br />
            <input type="number" name="UnitsInStock" value="@unitsinstock" min="0" step="1" /><br />
            <input type="number" name="UnitsOnOrder" value="@unitsonorder" min="0" step="1" /><br />
            <input type="number" name="ReorderLevel" value="@reorderlevel" min="0" step="1" /><br />
            @if (discontinued.Equals("True") || (discontinued == "1"))
            {
                <input type="checkbox" name="Discontinued" checked value="1" /><br /><br />
            }
            else
            {
                <input type="checkbox" name="Discontinued" value="0" /><br /><br />
            }
        </div>
        <div class="row">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary" value="update">Update</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" value="delete" formnovalidate>Delete</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" value="cancel" formnovalidate>Cancel</button>
        </div>
        @* this javascript will allow for a confirmation dialog to appear
            when a particular button is pressed (theDelete) *@
        <script type="text/javascript">
                document.getElementById("theDelete").onclick = ConfirmDelete;
                function ConfirmDelete() {
                    return confirm("Are you sure you want to remove @productname");
                }
        </script>
    </form>
</div>
